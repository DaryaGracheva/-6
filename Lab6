import time
import random
import numpy as np

print("Результат работы программы:")

rows = int(input("Введите количество строк (столбцов) квадратной матрицы больше 3: "))
while rows < 4:
    rows = int(input("Вы ввели неверное число\nВведите количество строк (столбцов) квадратной матрицы больше 3:"))
K = int(input("Введите число К: "))
start = time.time()
A = np.zeros((rows, rows), dtype=int)
F = np.zeros((rows, rows), dtype=int)

time0 = time.time()

for i in range(rows):  # формируем матрицу А с помощью генератора случайных чисел
    for j in range(rows):
        A[i][j] = np.random.randint(-10, 10)

time1 = time.time()
print("\nМатрица A: \n", A, "\nВремя вывода матрицы А:", time1 - time0)

for i in range(rows):  # формируем матрицу F, копируя из матрицы А
    A[i][j] = 0
F = A.copy()

count_nechet = 0
count_chet = 0

for i in range(rows // 2, rows):  # считаем кол-во положительных элементов в четных столбцах и кол-во отрицательных элементов в нечетных столбцах матрицы С
    for j in range(rows // 2, rows):
        if j % 2 == 1 and A[i][j] < 0:
            count_nechet += 1
        elif j % 2 == 0 and A[i][j] > 0:
            count_chet += 1

if count_nechet < count_chet:  # в С кол-во положительных элементов в четных столбцах матрицы больше,чем отрицательных элементов в нечетных столбцах матрицы, то меняем местами B и C симметрично
    print("\nМеняем B и C симметрично")
    F[0:rows // 2, rows // 2 + rows % 2:rows] = A[rows // 2 + rows % 2:rows, rows // 2 + rows % 2:rows]
    F[rows // 2 + rows % 2:rows, rows // 2 + rows % 2:rows] = A[0:rows // 2, rows // 2 + rows % 2:rows]
else:  # иначе С и Е меняем местами несимметрично
    print("\nМеняем С и Е несимметрично")
    F[0:rows // 2, 0:rows // 2] = A[rows // 2 + rows % 2:rows, rows // 2 + rows % 2:rows]
    F[rows // 2 + rows % 2:rows, rows // 2 + rows % 2:rows] = A[0:rows // 2, 0:rows // 2]

time2 = time.time()
print("\nМатрица F: \n", F, "\nВремя вывода матрицы F:", time2 - time0)

x = []
for i in range(rows):
    for j in range(rows):
        x.append(A[i][j])
c = min(x)

if np.linalg.det(A) == 0 or np.linalg.det(F) == 0:
    print("\nНельзя вычислить, поскольку матрица А или F вырождена")
elif np.linalg.det(A) > sum(F.diagonal()):
    A = np.dot(A, np.transpose(A)) - (K * np.transpose(F))  # A*A^T - K*F^(-1)
    finish = time.time()
    print("\nОпределитель матрицы А больше суммы диагональных элементов матрицы F\n")
    print("\nВычисление выражения: A*A^T - K*F^(-1)")
else:
    A = (np.linalg.inv(A) + np.tril(A) - np.linalg.inv(F))  # A^(-1) + G - F^(-1)
    finish = time.time()
    print("\nOпределитель матрицы А меньше суммы диагональных элементов матрицы F")
    print("\nВычисление выражения: A^(-1) + G - F^(-1)")
    print("\nТреугольная матрица из А :\n", np.tril(A))

print("\nРезультат:")
print(A)

from matplotlib import pyplot as plt
import matplotlib.cm as cm
import seaborn as sns
import pandas as pd

# matplotlib

plt.title("Scatter")    # 1 пример matplotlib
plt.xlabel("Numbers")
plt.ylabel("volumes")
for j in range (rows):
    plt.scatter([i for i in range(rows)] , A[j][::])
plt.show()

plt.title("Plot")    # 2 пример matplotlib
plt.xlabel("Numbers")
plt.ylabel("volumes")
for j in range (rows):
    plt.plot([i for i in range(rows)], A[j][::], marker='x')
plt.show()

# seaborn

sns.set_theme(style="white")  # 1 пример seaborn
uniform_data = A
if rows >= 50 or K >= 10:
    graph = sns.heatmap(A, vmin=-20 * rows, vmax=20 * rows)
elif rows < 50 or K < 10:
    graph = sns.heatmap(A, vmin=-50, vmax=50, annot_kws={'size': 7}, annot=True, fmt=".1f")
plt.show()

df = pd.DataFrame(A)

sns.heatmap(data = F, annot = True)             # 2 пример seaborn
plt.xlabel("Matrix column number")
plt.ylabel("Matrix row number")
plt.show()

p = sns.lineplot(data=df)   # 3 пример seaborn
p.set_xlabel("Номер элемента в столбце", fontsize=10)
p.set_ylabel("Значение", fontsize=10)
plt.show()

finish = time.time()
result = finish - start
print("\nProgram time: " + str(result) + " seconds.")
